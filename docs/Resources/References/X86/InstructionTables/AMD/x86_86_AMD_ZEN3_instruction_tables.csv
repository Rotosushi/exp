"AMD Zen 3",,,,,,
"List of instruction timings and macro-operation breakdown",,,,,,
,,,,,,
"Explanation of column headings:",,,,,,
"Instruction:","Name of instruction. Multiple names mean that these instructions have the same data. Similar instructions with or without V name prefix and with two or three operands behave the same unless otherwise noted. ",,,,,
"Operands:","i = immediate constant, r = any register, r32 = 32-bit register, etc., mm = 64 bit mmx register, x = 128 bit xmm register, y = 256 bit ymm register, v = any vector register, m = any memory operand including indirect operands, m64 means 64-bit memory operand, etc.",,,,,
"Ops:","Number of macro-operations issued from instruction decoder to schedulers.",,,,,
"Latency:","This is the delay that the instruction generates in a dependency chain. The numbers are minimum values. Cache misses, misalignment, and exceptions may increase the clock counts considerably. The latency listed does not include the memory operand where the listing for register and memory operand are joined (r/m).",,,,,
"Reciprocal throughput:","This is also called issue latency. This value indicates the average number of clock cycles from the execution of an instruction begins to a subsequent independent instruction of the same kind can begin to execute. A value of 1/3 indicates that the execution units can handle 3 instructions per clock cycle in one thread. However, the throughput may be limited by other bottlenecks in the pipeline. ",,,,,
"Execution pipe:","Indicates which execution pipe or unit is used for the macro-operations:
P0: Floating point and vector pipe 0
P1: Floating point and vector pipe 1
P2: Floating point and vector pipe 2
P3: Floating point and vector pipe 3
P0 P1: Uses both P0 and P1
P01: Uses either P0 and P1
Where no unit is specified, it may use one or more integer pipe or address generation units.
Two micro-operations can execute simultaneously if they go to different
execution pipes",,,,,
"Domain:","Tells which execution unit domain is used:
ivec: integer vector execution unit.
fp: floating point execution unit.
inherit: the output operand inherits the domain of the input operand.
There is an additional latency of 1 clock cycle if the output of an ivec instruction goes to the input of a fp instruction, and when the output of a fp instruction goes to the input of an ivec instruction. All other latencies after memory load and before memory store instructions are included in the latency counts.",,,,,
,,,,,,
"Integer instructions",,,,,,
"Instruction","Operands","Ops","Latency","Reciprocal throughput","Execution pipes","Notes"
"Move instructions",,,,,,
"MOV","r8,r8","1","1","0.25",,
"MOV","r8h,r8","1","1","0.5",,
"MOV","r16,r16","1","1","0.25",,
"MOV","r32,r32","1","0","0.17",,"renaming"
"MOV","r64,r64","1","0","0.17",,"renaming"
"MOV","r,i","1",,"0.25",,
"MOV","r,m8/16","1","3","0.33",,
"MOV","r,m32/64","1","0-3","0.33",,"may mirror"
"MOV","m,r8/16","1","3","0.5",,
"MOV","m,r32/64","1","0-3","0.5",,"may mirror"
"MOV","m,i","1",,"0.5",,
"MOVNTI","m,r","1","~900","1",,
"MOVZX, MOVSX","r,r","1","1","0.25",,
"MOVZX, MOVSX","r,m","1","3-4","0.33",,
"MOVSXD","r64,r32","1","1","0.25",,
"MOVSXD","r64,m32","1","3","0.33",,
"CMOVcc","r,r","1","1","0.5",,
"CMOVcc","r,m","1",,"0.5",,
"XCHG","r8,r8","2","1","1",,
"XCHG","r16,r16","2","1","1",,
"XCHG","r32,r32","2","0","0.33",,"renaming"
"XCHG","r64,r64","2","0","0.33",,"renaming"
"XCHG","r,m","2","7-8","7-8",,"depends on hw"
"XLAT",,"3","6","2",,
"PUSH","r","1",,"0.5",,
"PUSH","i","1",,"0.5",,
"PUSH","m","2",,"1",,
"PUSHF(D/Q)",,"11",,"4",,
"PUSH","sp","2",,"1",,
"PUSHA(D)",,"9",,"4",,
"POP","r","1",,"0.33",,
"POP","m","2",,"1",,
"POPF(D/Q)",,"37",,"13",,
"POPA(D)",,"16",,"6",,
"POP","sp","1",,"2",,
"LEA","r16,[m]","2","1-4","1",,
"LEA","r32/64,[m]","1","1","0.25",,"rip relative"
"LEA","r32/64,[m]","1","1","0.25",,"1-2 components"
"LEA","r32/64,[m]","2","2","0.5",,"3 components"
"LAHF",,"1","1","1",,
"SAHF",,"1","1","0.25",,
"SALC",,"1","1","1",,
"BSWAP","r","1","1","0.25",,
"MOVBE","r,[m]","1",,"0.33",,"MOVBE"
"MOVBE","[m],r","2",,"0.5",,"MOVBE"
"PREFETCHNTA","m","1",,"0.33",,
"PREFETCHT0/1/2","m","1",,"0.33",,
"PREFETCH/W","m","1",,"0.33",,"PREFETCHW"
"SFENCE",,"1",,"1",,
"LFENCE",,"1",,"10",,
"MFENCE",,"6",,"~60",,
,,,,,,
"Arithmetic instructions",,,,,,
"ADD, SUB","r,r","1","1","0.25",,
"ADD, SUB","r,i","1","1","0.25",,
"ADD, SUB","r,m","1",,"0.33",,
"ADD, SUB","m,r","1","7-8","1",,
"ADC, SBB","r,r","1","1","1",,
"ADC, SBB","r,i","1","1","1",,
"ADC, SBB","r,m","1","1","1",,
"ADC, SBB","m,r/i","1","8","1",,
"ADCX ADOX","r,r","1","1","1",,"ADX"
"CMP","r,r","1","1","0.25",,
"CMP","r,i","1","1","0.25",,
"CMP","r,m","1",,"0.33",,
"CMP","m,i","1",,"0.33",,
"INC, DEC, NEG","r","1","1","0.25",,
"INC, DEC, NEG","m","1","7-8","1",,
"AAA, AAS",,"10","6",,,
"DAA",,"16","8",,,
"DAS",,"20","10",,,
"AAD",,"4","5",,,
"AAM",,"4","13","4",,
"MUL, IMUL","r8/m8","1","3","1",,
"MUL, IMUL","r16/m16","3","3","2",,
"MUL, IMUL","r32/m32","2","3","1",,
"MUL, IMUL","r64/m64","2","3","1",,
"IMUL","r,r","1","3","1",,
"IMUL","r,m","1",,"1",,
"IMUL","r16,r16,i","2","4","1",,
"IMUL","r32,r32,i","1","3","1",,
"IMUL","r64,r64,i","1","3","1",,
"IMUL","r16,m16,i","2",,"1",,
"IMUL","r32,m32,i","1",,"1",,
"IMUL","r64,m64,i","1",,"1",,
"MULX","r,r,r","2","4","1",,"BMI2"
"DIV","r8/m8","2","11","4",,
"DIV","r16/m16","2","11-12","4",,"depends on operand values"
"DIV","r32/m32","2","9-12","6",,
"DIV","r64/m64","2","9-17","7-12",,
"IDIV","r8/m8","2","11","4",,
"IDIV","r16/m16","2","11-12","4",,
"IDIV","r32/m32","2","9-12","6",,
"IDIV","r64/m64","2","9-17","7-12",,
"CBW",,"1","1","0.25",,
"CWDE, CDQE",,"1","1","0.25",,
"CDQ, CQO",,"1","1","0.25",,
"CWD",,"2","1","1",,
,,,,,,
"Logic instructions",,,,,,
"AND, OR, XOR","r,r","1","1","0.25",,
"AND, OR, XOR","r,i","1","1","0.25",,
"AND, OR, XOR","r,m","1",,"0.33",,
"AND, OR, XOR","m,r/i","1","7-8","1",,
"TEST","r,r","1","1","0.25",,
"TEST","r,i","1","1","0.25",,
"TEST","m,r","1",,"0.33",,
"TEST","m,i","1",,"0.33",,
"NOT","r","1","1","0.25",,
"NOT","m","1","7-8","1",,
"ANDN","r,r,r","1","1","0.25",,"BMI1"
"SHL, SHR, SAR","r,i/CL","1","1","0.5",,
"ROL, ROR","r,i/CL","1","1","0.5",,
"RCL","r,1","1","1","1",,
"RCL","r,i","9","4","4",,
"RCL","r,cl","9","4","4",,
"RCR","r,1","1","1","1",,
"RCR","r,i","7","3","3",,
"RCR","r,cl","7","3","3",,
"SHLD, SHRD","r,r,i","4","2","2",,
"SHLD, SHRD","r,r,cl","5","2","2",,
"SHLD, SHRD","m,r,i/CL","6",,,,
"SARX","r,r,r","1","1","0.5",,"BMI2"
"SHLX","r,r,r","1","1","0.5",,"BMI2"
"SHRX","r,r,r","1","1","0.5",,"BMI2"
"RORX","r,r,i","1","1","0.5",,"BMI2"
"BT","r,r/i","1","1","0.5",,
"BT","m,i","2",,"0.5",,
"BT","m,r","7",,"3",,
"BTC, BTR, BTS","r,r/i","2","2","1",,
"BTC, BTR, BTS","m,i","4",,"2",,
"BTC, BTR, BTS","m,r","9",,"3",,
"BSF","r,r","6","3","3",,
"BSF","r,m","8","4","4",,
"BSR","r,r","6","4","4",,
"BSR","r,m","8",,"5",,
"SETcc","r","1","1","0.5",,
"SETcc","m","2",,"3",,
"CLC",,"1",,"0.17",,
"STC",,"1",,"0.25",,
"CMC",,"1","1","1",,
"CLD",,"1",,"3",,
"STD",,"1",,"4",,
"POPCNT","r,r","1","1","0.25",,"SSE4.2"
"LZCNT","r,r","1","1","0.25",,"LZCNT"
"TZCNT","r,r","2","2","0.5",,"BMI1"
"BEXTR","r,r,r","1","1","0.5",,"BMI1"
"BLSI","r,r","2","2","0.5",,"BMI1"
"BLSMSK","r,r","2","2","0.5",,"BMI1"
"BLSR","r,r","2","2","0.5",,"BMI1"
"PDEP","r,r,r","1","3","1",,"BMI2"
"PEXT","r,r,r","1","3","1",,"BMI2"
"BZHI","r,r,r","1","1","0.5",,"BMI2"
,,,,,,
"Control transfer instructions",,,,,,
"JMP","short/near","1",,"1",,"more if > 2 jmp per 16 bytes"
"JMP","r","1",,"1",,
"JMP","m","1",,"1",,
"Jcc","short/near","1",,"0.5-1",,"0.5 predicted not taken. 1 predicted taken. Higher if mispredicted"
"fused CMP+Jcc","short/near","1",,"0.5-2",,
"J(E/R)CXZ","short","1",,"0.5-1",,
"LOOP","short","1",,"0.5-1",,
"LOOPE LOOPNE","short","1",,"0.5-1",,
"CALL","near","2",,"2",,
"CALL","r","2",,"2",,
"CALL","m","6",,"2",,
"RET",,"2",,"2",,
"RET","i","5",,"2",,
"BOUND","m","13",,"4",,"for no jump"
"INTO",,"4",,"2",,"for no jump"
,,,,,,
"String instructions",,,,,,
"LODS",,"4",,"3",,
"REP LODS","m","7n",,"2n",,
"STOS",,"3",,"3",,
"REP STOS",,"2n",,"~1n",,"small n"
"REP STOS",,"2 per 16B",,"0.5 per 16B",,"best case"
"MOVS",,"5",,"3",,
"REP MOVS",,"< 1n",,"< 1n",,"small n"
"REP MOVS",,"1.5 pr 16B",,"0.5 per 16B",,"best case"
"SCAS",,"4",,"3",,
"REP SCAS",,"8n",,"2n",,
"CMPS",,"6",,"3",,
"REP CMPS",,"10n",,"3n",,
,,,,,,
"Synchronization",,,,,,
"LOCK ADD","m,r","1","~8",,,
"XADD","m,r","4","8",,,
"LOCK XADD","m,r","4","8",,,
"CMPXCHG","m,r8","5","9",,,
"CMPXCHG","m,r16/32/64","6","9",,,
"LOCK CMPXCHG","m,r","5-6","9",,,
"CMPXCHG8B","m64","19","10",,,
"LOCK CMPXCHG8B","m64","19","10",,,
"CMPXCHG16B","m128","28","15",,,
"LOCK CMPXCHG16B","m128","28","15",,,
,,,,,,
"Other",,,,,,
"NOP (90)",,"1",,"0.17",,
"Long NOP (0F 1F)",,"1",,"0.17",,
"PAUSE",,"9",,"~65",,
"ENTER","a,0","12",,"19",,
"ENTER","a,b","11+3b",,"~20+b",,
"LEAVE",,"2",,"3",,
"CPUID",,"40-100",,"130-150",,
"XGETBV",,"39",,"45",,
"RDTSC",,"44",,"36",,
"RDTSCP",,"44",,"68",,"rdtscp"
"RDPMC ",,"20",,"20",,
"CRC32","r32,r8","1","3","1",,
"CRC32","r32,r16","1","3","1",,
"CRC32","r32,r32","1","3","1",,
"RDRAND ","r","55",,"~75",,
"RDSEED","r16/32","23",,"~3000",,
"RDSEED","r64","32",,"~6100",,
,,,,,,
"Floating point x87 instructions",,,,,,
"Instruction","Operands","Ops","Latency","Reciprocal throughput","Execution pipes","Domain, notes"
"Move instructions",,,,,,
"FLD","r","1","1","0.5","P01",
"FLD","m32/64","1","7","0.5","P23",
"FLD","m80","10","8","4",,
"FBLD","m80","25","34","25",,
"FST(P)","r","1","1","0.5","P01",
"FST(P)","m32/64","2","7","1",,
"FSTP","m80","17","8",,,
"FBSTP","m80","278",,"130",,
"FXCH","r","1","0","0.25","P0123",
"FILD","m","1","11","1","P0",
"FIST(T)(P)","m","2","7","1","P0 P1",
"FLDZ, FLD1",,"1",,"1","P1",
"FCMOVcc","st0,r","7","4","3",,
"FFREE","r","1","0","0.25",,
"FINCSTP, FDECSTP",,"1","0","0.25",,
"FNSTSW","AX","3",,"19",,
"FNSTSW","m16","2",,"15",,
"FLDCW","m16","1",,"2","P0",
"FNSTCW","m16","2",,"2",,
,,,,,,
"Arithmetic instructions",,,,,,
"FADD(P),FSUB(R)(P)","r/m","1","6-7","2","P01",
"FIADD,FISUB(R)","m","2","2","1","P01",
"FMUL(P)","r/m","1","6-7","1","P01",
"FIMUL","m","3",,"2",,
"FDIV(R)(P)","r","1","15","6","P01",
"FDIV(R)","m","1",,,,
"FIDIV(R)","m","2",,"6",,
"FABS, FCHS",,"1","1","0.5","P01",
"FCOM(P), FUCOM(P)","r/m","1",,"1","P01",
"FCOMPP, FUCOMPP",,"1",,"1",,
"FCOMI(P)","r","2","11","1",,
"FICOM(P)","m","2",,"1",,
"FTST",,"1",,"1","P01",
"FXAM",,"1",,"0.5","P01",
"FRNDINT",,"1","4","2","P01",
"FPREM FPREM1",,"2","24-70","14-50",,
,,,,,,
"Math",,,,,,
"FSQRT",,"1","25","10",,
"FLDPI, etc.",,"1",,"1",,
"FSIN",,"30-130","40-200",,"P0 P1",
"FCOS",,"30-60","50-140",,"P0 P1",
"FSINCOS",,"60-120","80-150",,"P0 P1",
"FPTAN",,"40-100","60-120",,"P0 P1",
"FPATAN",,"40-120","50-180",,"P0 P1",
"FSCALE",,"8","11","4","P0 P1",
"FXTRACT",,"13","11","5","P0 P1",
"F2XM1",,"42","50-60",,"P0 P1",
"FYL2X",,"47","40-60",,"P0 P1",
"FYL2XP1",,"120","40-180",,"P0 P1",
,,,,,,
"Other",,,,,,
"FNOP",,"1",,"0.25",,
"(F)WAIT",,"1",,"0.25",,
"FNCLEX",,"21",,"49",,
"FNINIT",,"35",,"100",,
"FNSAVE","m864","102",,"~150",,
"FRSTOR","m864","79",,"~118",,
,,,,,,
"Integer vector instructions",,,,,,
"Instruction","Operands","Ops","Latency","Reciprocal throughput","Execution pipes","Notes"
"Move instructions",,,,,,
"MOVD","r32, mm","1","3","1",,
"MOVD","mm, r32","2","4","1",,
"MOVD/Q","r32/64, x","1","3","1",,
"MOVD/Q","x, r32/64","1","3","1",,
"MOVD","mm/x,m32","1","4","0.5",,
"MOVD","m32,mm/x","1","5","1",,
"MOVQ","mm/x,mm/x","1","1","0.25",,
"MOVQ","mm/x,m64","1","4","0.5",,
"MOVQ","m64,mm/x","1","5","1",,
"MOVDQA","x,x","1","0","0.17","none","renaming"
"MOVDQA","x,m","1","4","0.5",,
"MOVDQA","m,x","1","5","1",,
"VMOVDQA","y,y","1","0","0.17","none","renaming"
"VMOVDQA","y,m256","1","5","0.5",,
"VMOVDQA","m256,y","1","5","1",,
"MOVDQU","x,x","1","0","0.17","none","renaming"
"MOVDQU","x,m","1","4","0.5",,
"MOVDQU","m,x","1","5","1",,
"LDDQU","x,m","1","4","0.5",,
"VMOVDQU","y,m","1","5","0.5",,
"VMOVDQU","m,y","1","5","1",,
"MOVDQ2Q","mm,x","1","1","0.25",,
"MOVQ2DQ","x,mm","2","2","0.5",,
"MOVNTQ","m,mm","1","~800","1",,
"MOVNTDQ","m,x","1","~800","1",,
"VMOVNTDQ","m,y","1","~800","1",,
"MOVNTDQA","x,m","1","5","0.5",,
"MOVNTDQA","y,m","1","5","0.5",,
"PACKSSWB/DW","mm/x,r/m","1","1","0.5","P12",
"PACKUSWB","mm/x,r/m","1","1","0.5","P12",
"VPACKSSWB/DW","v,r/m","1","1","0.5","P12",
"VPACKUSWB","v,r/m","1","1","0.5","P12",
"PUNPCKH/LBW/WD/DQ","v,r/m","1","1","0.5","P12",
"PUNPCKL/HQDQ","v,r/m","1","1","0.5","P12",
"PSHUFB","v,r/m","1","1","0.5","P12",
"PSHUFD","v,v,i","1","1","0.5","P12",
"PSHUFW","mm,mm,i","1","1","0.5","P12",
"PSHUFL/HW","v,v,i","1","1","0.5","P12",
"PALIGNR","v,r/m,i","1","1","0.5","P12",
"PBLENDW","v,r/m,i","1","1","0.25","P0123",
"VPERMD","v,v,v","2","8","1","P01",
"VPERMD","v,v,m","3",,"2",,
"VPERMQ","v,v,i","2","6.5","1","P02 P1",
"VPERMQ","v,m,i","3",,"1",,
"VPERM2I128","v,v,v,i","1","3.5","1","P01",
"VPERM2I128","v,v,m,i","1",,"1",,
"VEXTRACTI128","x,y,i","1","3.5","1","P01",
"VEXTRACTI128","m,y,i","2","8","1","P01",
"VINSERTI128","y,x,i","1","2","1","P01",
"VINSERTI128","y,m,i","1","6","1","P01",
"MASKMOVQ","mm,mm","40","~850","~9",,
"MASKMOVDQU","x,x","75","~850","~18",,
"PMOVMSKB","r32,mm","1","3","1",,
"PMOVMSKB","r32,x","1","3","1",,
"VPMOVMSKB","r32,y","1","5","1",,
"PEXTRB/W/D/Q","r,x/mm,i","2","4","1","P12",
"PINSRB/W/D/Q","x/mm,r,i","2","4","1","P1",
"EXTRQ","x,i,i","2","3","1","P0123","AMD SSE4A"
"EXTRQ","x,x","1",,"0.5","P01","AMD SSE4A"
"INSERTQ","x,x,i,i","2",,"0.5","P0123","AMD SSE4A"
"INSERTQ","x,x","1",,"0.5","P01","AMD SSE4A"
"PMOVSXBW/BD/BQ/WD/WQ/DQ","x,x","1","1","0.5","P12",
"VPMOVSXBW/BD/BQ/WD/WQ/DQ","y,x","2","4","1","P12",
"PMOVZXBW/BD/BQ/WD/WQ/DQ","x,x","1","1","0.5","P12",
"VPMOVZXBW/BD/BQ/WD/WQ/DQ","y,x","2","4","1","P12",
"VINSERTI128","y,y,x,i","1","2","1","P01","AVX2"
"VINSERTI128","y,y,m,i","1","5","1","P01","AVX2"
"VPBROADCAST
B/W/D/Q","x,x","1","1","0.5","P12","AVX2"
"VPBROADCAST
B/W/D/Q","x,m","1",,"0.5",,"AVX2"
"VPBROADCAST
B/W/D/Q","y,x","1","2","1","P01","AVX2"
"VPBROADCAST
B/W/D/Q","y,m","1",,"0.5",,"AVX2"
"VBROADCASTI128","y,m128","1","4","0.5",,"AVX2"
"VPGATHERDD","x,[r+s*x],x","23",,"5","P0 P1 P2","AVX2"
"VPGATHERDD","y,[r+s*y],y","39",,"9","P0 P1 P2","AVX2"
"VPGATHERQD","x,[r+s*x],x","15",,"4","P0 P1 P2","AVX2"
"VPGATHERQD","x,[r+s*y],x","23",,"5","P0 P1 P2","AVX2"
"VPGATHERDQ","x,[r+s*x],x","19",,"4","P0 P1 P2","AVX2"
"VPGATHERDQ","y,[r+s*x],y","23",,"5","P0 P1 P2","AVX2"
"VPGATHERQQ","x,[r+s*x],x","15",,"4","P0 P1 P2","AVX2"
"VPGATHERQQ","y,[r+s*y],y","23",,"5","P0 P1 P2","AVX2"
,,,,,,
"Arithmetic instructions",,,,,,
"PADDB/W/D/Q","v,v","1","1","0.25","P0123","ivec"
"PADDB/W/D/Q","v,m","1",,"0.5",,
"PADD(U)SB/W","v,v","1","1","0.5","P01",
"PSUBB/W/D/Q","v,v","1","1","0.25","P0123",
"PSUB(U)SB/W","v,v","1","1","0.5","P01",
"PHADD/SUB(S)W/D","mm,mm","3","2","2",,
"PHADD/SUB(S)W/D","x,x","4","2","2",,
"VPHADD/SUB(S)W/D","y,y,y","3","2","2",,
"PCMPEQ B/W/D","v,v","1","1","0.25","P0123",
"PCMPEQQ","v,v","1","1","0.5","P01",
"PCMPGT B/W/D","v,v","1","1","0.25","P0123",
"PCMPGTQ","v,v","1","1","1","P0123",
"PMULLW PMULHW PMULHUW PMULLD PMULDQ PMULUDQ","v,v","1","3","0.5","P03",
"PMULHRSW","v,v","1","3","0.5","P03",
"PMADDWD","v,v","1","3","0.5","P03",
"PMADDUBSW","v,v","1","3","0.5","P03",
"PAVGB/W","v,v","1","1","0.5","P01",
"PMIN/MAX SB/SW/ SD UB/UW/UD","v,v","1","1","0.25","P0123",
"PHMINPOSUW","x,x","1","3","0.5","P01",
"PABSB/W/D","v,v","1","1","0.5","P01",
"PSIGNB/W/D","v,v","1","1","0.5","P01",
"PSADBW","v,v","1","3","0.5","P03",
"MPSADBW","x,x,i","4","4","2",,
"VMPSADBW","y,y,y,i","3","4","2",,
,,,,,,
"Logic",,,,,,
"PAND PANDN POR PXOR","v,v","1","1","0.25","P0123","ivec"
"PSLL/RL W/D/Q PSRAW/D","v,v","1","1","0.5","P12",
"VPSLL/RL W/D/Q VPSRAW/D","v,v,i","1","1","0.5","P12",
"PSLLDQ, PSRLDQ","v,i","1","1","0.5","P12",
"VPSLLVD/Q
VPSRAVD
VPSRLVD/Q","v,v,v","1","1","0.5","P12","AVX2"
"PTEST","v,v","2",,"1","P12",
,,,,,,
"String instructions",,,,,,
"PCMPESTRI","x,x,i","8","10","3",,"SSE4.2"
"PCMPESTRI","x,m,i","12",,"4",,"SSE4.2"
"PCMPESTRM","x,x,i","7","6","3",,"SSE4.2"
"PCMPESTRM","x,m,i","12",,"4",,"SSE4.2"
"PCMPISTRI","x,x,i","4","8","2",,"SSE4.2"
"PCMPISTRI","x,m,i","4",,"2",,"SSE4.2"
"PCMPISTRM","x,x,i","3","6","2",,"SSE4.2"
"PCMPISTRM","x,m,i","4",,"2",,"SSE4.2"
,,,,,,
"Encryption",,,,,,
"PCLMULQDQ","x,x/m,i","4","4","2",,"pclmul"
"VPCLMULQDQ","y,y,y,i","4","4","2",,"pclmul"
"AESDEC","x,x","1","4","0.5","P01","aes"
"VAESDEC","y,y,y","1","4","0.5","P01","aes"
"AESDECLAST","x,x","1","4","0.5","P01","aes"
"VAESDECLAST","v,v,v","1","4","0.5","P01","aes"
"AESENC","x,x","1","4","0.5","P01","aes"
"VAESENC","v,v,v","1","4","0.5","P01","aes"
"AESENCLAST","x,x","1","4","0.5","P01","aes"
"VAESENCLAST","v,v,v","1","4","0.5","P01","aes"
"AESIMC","x,x","1","4","0.5","P01","aes"
"AESKEYGENASSIST","x,x,i","1","4","0.5","P01","aes"
"SHA1RNDS4","x,x,i","1","6","2","P01","sha"
"SHA1NEXTE","x,x","1","1","0.5","P01","sha"
"SHA1MSG1","x,x","2","2","0.5","P0123","sha"
"SHA1MSG2","x,x","1","1","0.5","P12","sha"
"SHA256RNDS2","x,x","1","4","2",,"sha"
"SHA256MSG1","x,x","2","2","0.5","P0123","sha"
"SHA256MSG2","x,x","4","3","2","P12","sha"
,,,,,,
"Other",,,,,,
"EMMS",,"1",,"0.25",,
,,,,,,
"Floating point XMM and YMM instructions",,,,,,
"Instruction","Operands","Ops","Latency","Reciprocal throughput","Execution pipes","Domain, notes"
"Move instructions",,,,,,
"MOVAPS/D","v,v","1","0","0.17","none","inherit"
"MOVUPS/D","v,v","1","0","0.17","none","inherit"
"MOVAPS/D MOVUPS/D","x,m128","1","4","0.5",,
"VMOVAPS/D VMOVUPS/D","y,m256","1","5","0.5",,
"MOVAPS/D MOVUPS/D","m128,x","1","5","1",,
"VMOVAPS/D VMOVUPS/D","m256,y","1","5","1",,
"MOVSS/D","x,x","1","1","0.25","P0123",
"MOVSS/D","x,m32/64","1","4","0.5",,
"MOVSS/D","m32/64,x","1","5","1",,
"MOVHPS/D","x,m64","1","5","0.5","P12",
"MOVHPS/D","m64,x","2","6","1","P12",
"MOVLPS/D","x,m64","1","5","0.5","P0123",
"MOVLPS/D","m64,x","1",,"1","P12",
"MOVLHPS MOVHLPS","x,x","1","1","0.5","P12",
"MOVMSKPS/D","r32,x","1","3","1",,
"VMOVMSKPS/D","r32,y","1","5","1",,
"MOVNTPS/D","m,v","1","~820","1",,
"MOVNTSS/SD","m,x","1",,"1",,"AMD SSE4A"
"SHUFPS/D","v,v/m,i","1","1","0.5","P12",
"VPERMILPS/PD","v,v,v/m","1","3","0.5","P01",
"VPERMILPS/PD","v,v/m,i","1","1","0.5","P12",
"VPERM2F128","y,y,y/m,i","1","3.5","0.5","P01",
"VPERMPS","y,y,y","2","8","1","P01","AVX2"
"VPERMPS","y,y,m","3",,"2",,"AVX2"
"VPERMPD","y,y,i","2","6.5","1","P1 P02","AVX2"
"VPERMPD","y,m,i","3",,"2",,"AVX2"
"BLENDPS/PD","y,y,i","1","1","0.25","P0123",
"BLENDVPS/PD","x,x/m,xmm0","1","1","0.5","P01",
"VBLENDVPS/PD","v,v,v/m,v","1","1","0.5","P01",
"MOVDDUP","v,v","1","1","0.5","P12",
"MOVDDUP","x,m64","1","15","0.5",,
"VMOVDDUP","y,m256","1",,"0.5",,
"VBROADCASTSS/D","x,x","1","1","0.5","P12",
"VBROADCASTSS/D","y,x","1","2","1","P01",
"VBROADCASTSS/D","v,m","1","4","0.5",,
"VBROADCASTF128","y,m128","1","4","0.5",,
"MOVSH/LDUP","v,v","1","1","0.5","P12",
"UNPCKH/LPS/D","v,v/m","1","1","0.5","P12",
"EXTRACTPS","r32,x,i","1","4","1","P12",
"EXTRACTPS","m32,x,i","2",,"1",,
"VEXTRACTF128","x,y,i","1","3","1","P01",
"VEXTRACTF128","m128,y,i","2","9","1","P2",
"INSERTPS","x,x,i","1","1","0.5","P12",
"INSERTPS","x,m32,i","1","5","1","P12",
"VINSERTF128","y,y,x,i","1","2","0.5","P01",
"VINSERTF128","y,y,m128,i","1","6","0.5","P01",
"VMASKMOVPS/D","v,v,m","1","5","0.5","P01",
"VMASKMOVPS/D","m128,x,x","18","18","6",,
"VMASKMOVPS/D","m256,y,y","42","22","12",,
"VGATHERDPS","x,[r+s*x],x","23",,"5",,"AVX2"
"VGATHERDPS","y,[r+s*y],y","39",,"9",,"AVX2"
"VGATHERQPS","x,[r+s*x],x","15",,"4",,"AVX2"
"VGATHERQPS","x,[r+s*y],x","23",,"5",,"AVX2"
"VGATHERDPD","x,[r+s*x],x","15",,"4",,"AVX2"
"VGATHERDPD","y,[r+s*x],y","23",,"5",,"AVX2"
"VGATHERQPD","x,[r+s*x],x","15",,"4",,"AVX2"
"VGATHERQPD","y,[r+s*y],y","23",,"5",,"AVX2"
,,,,,,
"Conversion",,,,,,
"CVTPD2PS","x,x","1","3","0.5","P23",
"VCVTPD2PS","x,y","2","5","1","P0123",
"CVTPS2PD","x,x","1","3","0.5","P23",
"VCVTPS2PD","y,x","2","6","1","P0123",
"CVTSD2SS","x,x","1","3","0.5","P23",
"CVTSS2SD","x,x","1","3","0.5","P23",
"CVTDQ2PS","v,v","1","3","0.5","P23",
"CVT(T) PS2DQ","v,v","1","3","0.5","P23",
"CVTDQ2PD","x,x","1","3","0.5","P23",
"VCVTDQ2PD","y,x","2","6","1",,
"CVT(T)PD2DQ","x,x","1","3","0.5","P23",
"VCVT(T)PD2DQ","x,y","2","5","1",,
"CVTPI2PS","x,mm","2","5","0.5",,
"CVT(T)PS2PI","mm,x","1","4","0.5",,
"CVTPI2PD","x,mm","2","5","1",,
"CVT(T) PD2PI","mm,x","2","5","0.5",,
"CVTSI2SS","x,r32","2","6","1",,
"CVT(T)SS2SI","r32,x","2","6","1",,
"CVTSI2SD","x,r32/64","2","7","1",,
"CVT(T)SD2SI","r32/64,x","2","6","1",,
"VCVTPS2PH","x/m,x,i","1","3","0.5","P23",
"VCVTPS2PH","x/m,y,i","2","6","1",,
"VCVTPH2PS","x,x/m","2","3","0.5","P23",
"VCVTPH2PS","y,x/m","2","5","1",,
,,,,,,
"Arithmetic",,,,,,
"ADDSS/D SUBSS/D","x,x/m","1","3","0.5","P23","fp"
"ADDPS/D SUBPS/D","v,v/m","1","3","0.5","P23",
"ADDSUBPS/D","v,v/m","1","3","0.5","P23",
"HADD/SUBPS/D","x,x","4","6","2",,
"VHADD/SUBPS/D","y,y,y/m","3","6","2",,
"MULPS MULPD","v,v/m","1","3","0.5","P01","fp"
"DIVSS DIVPS","v,v/m","1","10.5","3.5","P01",
"DIVSD DIVPD","v,v/m","1","13.5","4.5","P01",
"RCPSS/PS","v,v/m","1","3","0.5","P01",
"CMPSS/SD/PS/PD","v,v/m","1","1","0.5","P23",
"(U)COMISS/SD","x,x/m","1","5","1","P23",
"MAXSS/SD/PS/PD MINSS/SD/PS/PD","v,v/m","1","1","0.5","P23","fp"
"ROUNDSS/SD/PS/PD","v,v/m,i","1","3","0.5","P23","fp"
"DPPS","x,x,i","8","15","4",,"SSE4.1"
"VDPPS","y,y,y,i","7","15","4",,
"DPPD","x,x,i","3","9","3",,"SSE4.1"
"VFMADD132PS/PD","v,v,v/m","1","4","0.5","P01","FMA3"
"All other FMA3 instructions: same as above",,,,,"P01","FMA3"
,,,,,,
"Math",,,,,,
"SQRTSS/PS","v,v/m","1","14","5","P01",
"SQRTSD/PD","v,v/m","1","20","9","P01",
"RSQRTSS/PS","x,x/m","1","3","0.5","P01",
"VRSQRTPS","y,y/m","1","1.5","1","P01",
,,,,,,
"Logic",,,,,,
"AND(N)/OR/XORPS/PD","v,v/m","1","1","0.25","P0123","fp"
,,,,,,
"Other",,,,,,
"VZEROUPPER",,"1",,"0.17",,
"VZEROALL",,"10",,"4",,"32 bit mode"
"VZEROALL",,"18",,"6",,"64 bit mode"
"LDMXCSR","m32","7","13","20",,
"STMXCSR","m32","2","13","15",,
"FXSAVE","m4096","96",,"77",,"32 bit mode"
"FXSAVE","m4096","104",,"85",,"64 bit mode"
"FXRSTOR","m4096","141",,"180",,"32 bit mode"
"FXRSTOR","m4096","146",,"180",,"64 bit mode"
"XSAVE, XSAVEOPT","m","130",,"100",,"32 bit mode"
"XSAVE, XSAVEOPT","m","132",,"100",,"64 bit mode"
"XRSTOR","m","212",,"230",,"32 bit mode"
"XRSTOR","m","193",,"200",,"64 bit mode"
"XSAVEC","m","346",,"340",,"32 bit mode"
"XSAVEC","m","329",,"310",,"64 bit mode"
