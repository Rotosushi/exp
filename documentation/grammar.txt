// Copyright (C) 2024 Cade Weinberg
// 
// This file is part of exp.
// 
// exp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// exp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with exp.  If not, see <http://www.gnu.org/licenses/>.
  -- grammar
  top = function 

  function = "fn" identifier formal-argument-list ("->" type)? block

  formal-argument-list = "(" (formal-argument ("," formal-argument)*)? ")"

  formal-argument = identifier ":" type

  block = "{" (statement ";")* "}"

  statement = declaration

  declaration = "var" identifier (":" type)? = affix

  affix = call (binop precedence-parser)?

  call = basic (actual-argument-list)?

  actual-argument-list = "(" (affix ("," affix)*)? ")"

  basic = literal
        | identifier 
        | unop basic 
        | "(" affix ")"

  literal = integer 
          //| "true"
          //| "false"
          //| "nil"

  type = "Int"
       //| "Bool"
       //| "Nil"

  identifier = [a-zA-Z_][a-zA-Z0-9_]*

  integer = [0-9]+

  unop = '-'
       //|'!'

  binop = '-'
        | '+'
        | '*'
        | '/'
        | '%'
  --
