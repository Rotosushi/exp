// Copyright (C) 2024 Cade Weinberg
//
// This file is part of exp.
//
// exp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// exp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with exp.  If not, see <https://www.gnu.org/licenses/>.
#ifndef EXP_BACKEND_INSTRUCTION_SELECTOR_H
#define EXP_BACKEND_INSTRUCTION_SELECTOR_H

/*
  The instruction selector needs to use the information generated by
  the register allocator alongside the bytecode to convert the bytecode
  into assembly.

  in broad strokes:
    for each instruction in the bytecode:
      - the Opcode maps to some x64 instruction Opcode
        (move -> mov, add -> add, etc...)

      - each Operand maps to some x64 instruction Operand
        (immediate -> immediate, SSA local -> register, etc...)

      - write out the completed x64 instruction

*/

#endif // !EXP_BACKEND_INSTRUCTION_SELECTOR_H