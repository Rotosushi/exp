// Copyright (C) 2024 Cade Weinberg
// 
// This file is part of exp.
// 
// exp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// exp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with exp.  If not, see <https://www.gnu.org/licenses/>.


  3 - "What is the IMR of the Control Flow Graph?"
      I know of two ways to store graphs in memory. 
      as a vector of linked lists (adjacency list)
      or a dynamic array treated as a matrix (adjacency matrix)
      now, normally I am all for not using linked lists, 
      when a dynamic array is available (for all the usual reasons). 
      However this is one situation where there might be a good argument.
      given that most vertecies in the graph are going to have < 10 outgoing 
      edges. That is, most functions are going to call out to < 10 other functions.
      so this means that even though a given program is going to have a lot of 
      vertecies, (one per function), each vertex is going to have very few edges.
      (approx < 10). This means that most of the storage allocated for an adjacency
      matrix will be wasted space. the hueristic is that since an adjacency matrix 
      will always use n^2 space (where n is the number of vertecies), if the number 
      of edges is significantly smaller than n^2, then most of the graphs storage 
      will remain unused. (the actual calculation should take into account that 
      the list approach has storage overhead per edge, so for some number of 
      vertecies (k) even if your graph is sparse a matrix will be less memory overall
      than an adjacency list. my bet is that k is on the order of 100.
      However given that this is a compiler, and real world programs routinely have
      hundreds if not thousands of functions, I's say the hueristic holds for the 
      current use-case.)
      so an adjacency list is going to be the choice.

  4 - "How does the CFG get created to represent the source code?"
      It would be nice if the parser could build the control flow graph as 
      it built the IR.