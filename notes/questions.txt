// Copyright (C) 2024 Cade Weinberg
// 
// This file is part of exp.
// 
// exp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// exp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with exp.  If not, see <https://www.gnu.org/licenses/>.

some basic questions:
1 - what is the in memory representation (IMR) of 
    the intermediate representation (IR)?
2 - how does the parser create the IR from the source code?
-> see intermediate_representation.txt

3 - what is the IMR of the control flow graph (CFG)?
4 - how does the CFG get created to represent the source code?
-> see control_flow_graph.txt

5 - how can the IR be converted into SSA form?
-> see intermediate_representation.txt

6 - how do we allocate global constants and new types when BC IR
    is optimized towards working with local variables?

7 - how does the backend generate target machine assembly?
7a - how does the register allocator use the IR to allocate variables?

okay. all of these are answered at this point. 

