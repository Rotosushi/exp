// Copyright (C) 2024 Cade Weinberg
// 
// This file is part of exp.
// 
// exp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// exp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with exp.  If not, see <https://www.gnu.org/licenses/>.

The current plan is to extend the compilers functionality.
reaching for a stable and useful base language. which is then 
extended via a standard library.

the current subgoal here is adding support for string-literals.

to my eyes, string-literals are really string-views into global constants.
and string-views are implemented as a pair of an i64 and a character pointer.
and pairs can be generalized to tuples.

string-literals are then used to implement the import mechanism.
which leads directly to modules and namespaces.
string-literals are used to implement for error messages.
and tuples are used alongside unions to implement a result type,
which is the basis for error handling in the language.
then we add a more robust suite of scalar types, alongside more binary 
and unary operators. which leads to literals of different types.
which leads directly into casting.
and casting leads to type reflection (and uses the error handling mechanism).
and binary and unary operators touch on function overloading and function 
templates.
pointers leads to dynamic memory allocation.


so, to start, we are adding support for tuples.
This feature requires argument passing to be essentially finished.
(passing and returning non-scalar values is the only thing I can think
of that needs to be added to the implementation of monomorphic functions.)
and it will force clarification of working with larger than scalar
types, when assembly instructions can only work with scalar types.
(The dot operator works to convert the non-scalar tuple type into a
element. which may or may not be scalar sized. Though, thinking of
it now, I may use the square brackets operator instead. as it already
makes sense to place an integer constant there. Which leads to the 
handling of a dynamic index, which is runtime bounds checked obviously,
which then causes a panic, or exit. along with an error message.
this error message is itself a tuple. so already we can see the usefulness 
of tuples.)