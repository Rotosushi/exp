// Copyright (C) 2024 Cade Weinberg
// 
// This file is part of exp.
// 
// exp is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// exp is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with exp.  If not, see <https://www.gnu.org/licenses/>.

--
 - add an evaluator, and use it to do constant value reductions on the input source code.
 - when we address labels (global symbols) in instructions, we should access them relative to 
    the %rip register. this allows the resulting assembly to be position independent code. 
    and decreases code size.
 - add support for string-literals
    - add support for tuples
    - add support for utf8
    - add support for pointers
 
--
    regarding %rip relative assembly. this is fine except for one snag implementation wise.
    We use the offset to address elements of tuples already. so we would need to be able to 
    encode something like label + offset(%rip). which is possible if the offset is comptime.
    because the assembler will fold the expression.










